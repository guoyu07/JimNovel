<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/context     
	         http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 自动扫描的包名 -->
	<context:component-scan base-package="com.jim.novel"></context:component-scan>

	<!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="default" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="config" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="folder" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="article" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="media" />
			</set>
		</property>
	</bean>

	<!-- 在XML配置文件中加入外部属性文件，当然也可以指定外部文件的编码 -->
	<bean id="propertyConfigurer" class="com.jim.novel.utils.PropertyUtils">
		<property name="locations">
			<list>
				<value>classpath:novel.properties</value> <!-- 指定外部文件的编码 -->
			</list>
		</property>
	</bean>

	<!-- 登陆时验证码的配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<!--通过构造函数注入属性值 -->
				<constructor-arg type="java.util.Properties">
					<props>
						<!-- 验证码宽度 -->
						<prop key="kaptcha.image.width">180</prop>
						<!-- 验证码高度 -->
						<prop key="kaptcha.image.height">50</prop>
						<!-- 生成验证码内容范围 -->
						<prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>
						<!-- 验证码个数 -->
						<prop key="kaptcha.textproducer.char.length">5</prop>
						<!-- 是否有边框 -->
						<prop key="kaptcha.border">no</prop>
						<!-- 验证码字体颜色 -->
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<!-- 验证码字体大小 -->
						<prop key="kaptcha.textproducer.font.size">25</prop>
						<!-- 验证码所属字体样式 -->
						<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
						<prop key="kaptcha.background.clear.from">white</prop>
						<prop key="kaptcha.background.clear.to">white</prop>
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<!-- 干扰线颜色 -->
						<prop key="kaptcha.noise.color">red</prop>
						<!-- 验证码文本字符间距 -->
						<prop key="kaptcha.textproducer.char.space">4</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- dataSource 配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${ds.initialSize}"/>
		<property name="minIdle" value="${ds.minIdle}"/>
		<property name="maxActive" value="${ds.maxActive}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${ds.maxWait}"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>

		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat"/>
	</bean>


	<!-- mybatis文件配置，扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"
		  p:configLocation="classpath:mybatis-config.xml"
		  p:mapperLocations="classpath:com/jim/novel/dao/*.xml"/>

	<!-- spring与mybatis整合配置，扫描所有dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.jim.novel.dao"
		  p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

	<!-- 对dataSource 数据源进行事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		  p:dataSource-ref="dataSource"/>


	<!-- FreeMarker的配置 -->
	<bean id="freeMarkerConfigurer"
		  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="/WEB-INF/static/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">10</prop>
				<prop key="defaultEncoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="number_format">#.##</prop>
				<prop key="whitespace_stripping">true</prop>
			</props>
		</property>
	</bean>

	<!-- 配置 FreeMarker视图解析器 -->
	<bean id="viewResolver"
		  class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
				  value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
		<property name="cache" value="false" />
		<property name="prefix" value="" />
		<property name="suffix" value=".html" /><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="contentType" value="text/html;charset=utf-8" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
	</bean>
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="10240000" />
	</bean>
	<!-- 配置使Spring采用CGLIB代理 -->
	<!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

	<!-- 启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
