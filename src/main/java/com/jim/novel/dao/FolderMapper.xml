<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jim.novel.dao.FolderMapper" >
  <resultMap id="BaseResultMap" type="com.jim.novel.model.Folder" >
    <id column="folder_id" property="folderId" jdbcType="INTEGER" />
    <result column="father_id" property="fatherId" jdbcType="INTEGER" />
    <result column="ename" property="ename" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="TINYINT" />
    <result column="sort" property="sort" jdbcType="TINYINT" />
    <result column="width" property="width" jdbcType="INTEGER" />
    <result column="height" property="height" jdbcType="INTEGER" />
    <result column="count" property="count" jdbcType="INTEGER" />
    <result column="display" property="display" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.jim.novel.model.Folder" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    folder_id, father_id, ename, name, path, level, sort, width, height, count, display, 
     create_time, modify_time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>

  <select id="getFolderById" resultType="com.jim.novel.entity.FolderVo">
    select * from folder where
    folderId=#{folderId}
  </select>

  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.jim.novel.model.FolderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from folder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jim.novel.model.FolderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from folder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultType="com.jim.novel.entity.FolderVo" parameterType="java.lang.Integer" >
    select 
    *
    from folder
    where folder_id = #{folderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from folder
    where folder_id = #{folderId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jim.novel.model.FolderExample" >
    delete from folder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jim.novel.model.Folder" >
    insert into folder (folder_id, father_id, ename, 
      name, path, level, 
      sort, width, height, 
      count, display,
      create_time, modify_time, content
      )
    values (#{folderId,jdbcType=INTEGER}, #{fatherId,jdbcType=INTEGER}, #{ename,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{path,jdbcType=VARCHAR}, #{level,jdbcType=TINYINT}, 
      #{sort,jdbcType=TINYINT}, #{width,jdbcType=INTEGER}, #{height,jdbcType=INTEGER}, 
      #{count,jdbcType=INTEGER}, #{display,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jim.novel.model.Folder" >
    insert into folder
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="folderId != null" >
        folder_id,
      </if>
      <if test="fatherId != null" >
        father_id,
      </if>
      <if test="ename != null" >
        ename,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="width != null" >
        width,
      </if>
      <if test="height != null" >
        height,
      </if>
      <if test="count != null" >
        count,
      </if>
      <if test="display != null" >
        display,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="folderId != null" >
        #{folderId,jdbcType=INTEGER},
      </if>
      <if test="fatherId != null" >
        #{fatherId,jdbcType=INTEGER},
      </if>
      <if test="ename != null" >
        #{ename,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=TINYINT},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=TINYINT},
      </if>
      <if test="width != null" >
        #{width,jdbcType=INTEGER},
      </if>
      <if test="height != null" >
        #{height,jdbcType=INTEGER},
      </if>
      <if test="count != null" >
        #{count,jdbcType=INTEGER},
      </if>
      <if test="display != null" >
        #{display,jdbcType=VARCHAR},
      </if>

      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jim.novel.model.FolderExample" resultType="java.lang.Integer" >
    select count(*) from folder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update folder
    <set >
      <if test="record.folderId != null" >
        folder_id = #{record.folderId,jdbcType=INTEGER},
      </if>
      <if test="record.fatherId != null" >
        father_id = #{record.fatherId,jdbcType=INTEGER},
      </if>
      <if test="record.ename != null" >
        ename = #{record.ename,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.path != null" >
        path = #{record.path,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null" >
        level = #{record.level,jdbcType=TINYINT},
      </if>
      <if test="record.sort != null" >
        sort = #{record.sort,jdbcType=TINYINT},
      </if>
      <if test="record.width != null" >
        width = #{record.width,jdbcType=INTEGER},
      </if>
      <if test="record.height != null" >
        height = #{record.height,jdbcType=INTEGER},
      </if>
      <if test="record.count != null" >
        count = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.display != null" >
        display = #{record.display,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update folder
    set folder_id = #{record.folderId,jdbcType=INTEGER},
      father_id = #{record.fatherId,jdbcType=INTEGER},
      ename = #{record.ename,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      path = #{record.path,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=TINYINT},
      sort = #{record.sort,jdbcType=TINYINT},
      width = #{record.width,jdbcType=INTEGER},
      height = #{record.height,jdbcType=INTEGER},
      count = #{record.count,jdbcType=INTEGER},
      display = #{record.display,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update folder
    set folder_id = #{record.folderId,jdbcType=INTEGER},
      father_id = #{record.fatherId,jdbcType=INTEGER},
      ename = #{record.ename,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      path = #{record.path,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=TINYINT},
      sort = #{record.sort,jdbcType=TINYINT},
      width = #{record.width,jdbcType=INTEGER},
      height = #{record.height,jdbcType=INTEGER},
      count = #{record.count,jdbcType=INTEGER},
      display = #{record.display,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jim.novel.model.Folder" >
    update folder
    <set >
      <if test="fatherId != null" >
        father_id = #{fatherId,jdbcType=INTEGER},
      </if>
      <if test="ename != null" >
        ename = #{ename,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=TINYINT},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=TINYINT},
      </if>
      <if test="width != null" >
        width = #{width,jdbcType=INTEGER},
      </if>
      <if test="height != null" >
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="count != null" >
        count = #{count,jdbcType=INTEGER},
      </if>
      <if test="display != null" >
        display = #{display,jdbcType=VARCHAR},
      </if>

      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where folder_id = #{folderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jim.novel.model.Folder" >
    update folder
    set father_id = #{fatherId,jdbcType=INTEGER},
      ename = #{ename,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR},
      level = #{level,jdbcType=TINYINT},
      sort = #{sort,jdbcType=TINYINT},
      width = #{width,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER},
      count = #{count,jdbcType=INTEGER},
      display = #{display,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where folder_id = #{folderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jim.novel.model.Folder" >
    update folder
    set father_id = #{fatherId,jdbcType=INTEGER},
      ename = #{ename,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      path = #{path,jdbcType=VARCHAR},
      level = #{level,jdbcType=TINYINT},
      sort = #{sort,jdbcType=TINYINT},
      width = #{width,jdbcType=INTEGER},
      height = #{height,jdbcType=INTEGER},
      count = #{count,jdbcType=INTEGER},
      display = #{display,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where folder_id = #{folderId,jdbcType=INTEGER}
  </update>


  <select id="getFolderListByFatherId" resultType="com.jim.novel.entity.FolderVo">
    select * from folder where father_id=#{fatherId}
    <if test="display !=null">and display = #{display}</if>
    order by sort
  </select>


  <select id="getFolderByEname" resultType="com.jim.novel.model.Folder">
    select * from folder
    where ename=#{ename}
  </select>

  <select id="getFolderListBySort" resultType="com.jim.novel.model.Folder">
    select * from folder order by sort
  </select>

  <select id="getAllFolderList" resultType="com.jim.novel.entity.FolderVo">
    select * from folder order by path,sort
  </select>

  <insert id="addFolder" parameterType="com.jim.novel.model.Folder">
    insert into
    folder(father_id,ename,name,content,path,level,sort,count,display,img_url,create_time,modify_time)
    value(#{fatherId},#{ename},#{name},#{content},#{path},#{level},#{sort},#{count},#{display},#{imgUrl},#{createTime},#{modifyTime})
    <selectKey resultType="Integer" keyProperty="folderId">
      SELECT
      LAST_INSERT_ID()
    </selectKey>
  </insert>


  <update id="updatePath">
    update folder set path=#{path} where
    folder_id=#{folderId}
  </update>

</mapper>