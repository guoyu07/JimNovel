<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jim.novel.dao.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.jim.novel.model.Article" >
    <id column="article_id" property="articleId" jdbcType="INTEGER" />
    <result column="folder_id" property="folderId" jdbcType="INTEGER" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="owner_id" property="ownerId" jdbcType="INTEGER" />
    <result column="img_url" property="imgUrl" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="keyword" property="keyword" jdbcType="VARCHAR" />
    <result column="view_count" property="viewCount" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    article_id, folder_id, path, owner_id, img_url, title, keyword, view_count, status, 
    create_time, modify_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jim.novel.model.ArticleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultType="com.jim.novel.entity.ArticleVo" parameterType="java.lang.Integer" >
    select 
    article.*,user.name as author
    from article
    JOIN
    user
    ON article.owner_id = user.id WHERE article.article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jim.novel.model.ArticleExample" >
    delete from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jim.novel.model.Article" >
    insert into article (article_id, folder_id, path, 
      owner_id, img_url, title, 
      keyword, view_count, status, 
      create_time, modify_time)
    values (#{articleId,jdbcType=INTEGER}, #{folderId,jdbcType=INTEGER}, #{path,jdbcType=VARCHAR}, 
      #{ownerId,jdbcType=INTEGER}, #{imgUrl,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, 
      #{keyword,jdbcType=VARCHAR}, #{viewCount,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.jim.novel.model.Article" >
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="articleId != null" >
        article_id,
      </if>
      <if test="folderId != null" >
        folder_id,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="ownerId != null" >
        owner_id,
      </if>
      <if test="imgUrl != null" >
        img_url,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="keyword != null" >
        keyword,
      </if>
      <if test="viewCount != null" >
        view_count,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="articleId != null" >
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="folderId != null" >
        #{folderId,jdbcType=INTEGER},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="ownerId != null" >
        #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="imgUrl != null" >
        #{imgUrl,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="keyword != null" >
        #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="viewCount != null" >
        #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jim.novel.model.ArticleExample" resultType="java.lang.Integer" >
    select count(*) from article
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update article
    <set >
      <if test="record.articleId != null" >
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.folderId != null" >
        folder_id = #{record.folderId,jdbcType=INTEGER},
      </if>
      <if test="record.path != null" >
        path = #{record.path,jdbcType=VARCHAR},
      </if>
      <if test="record.ownerId != null" >
        owner_id = #{record.ownerId,jdbcType=INTEGER},
      </if>
      <if test="record.imgUrl != null" >
        img_url = #{record.imgUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.keyword != null" >
        keyword = #{record.keyword,jdbcType=VARCHAR},
      </if>
      <if test="record.viewCount != null" >
        view_count = #{record.viewCount,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      folder_id = #{record.folderId,jdbcType=INTEGER},
      path = #{record.path,jdbcType=VARCHAR},
      owner_id = #{record.ownerId,jdbcType=INTEGER},
      img_url = #{record.imgUrl,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      keyword = #{record.keyword,jdbcType=VARCHAR},
      view_count = #{record.viewCount,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jim.novel.model.Article" >
    update article
    <set >
      <if test="folderId != null" >
        folder_id = #{folderId,jdbcType=INTEGER},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="ownerId != null" >
        owner_id = #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="imgUrl != null" >
        img_url = #{imgUrl,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="keyword != null" >
        keyword = #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="viewCount != null" >
        view_count = #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jim.novel.model.Article" >
    update article
    set folder_id = #{folderId,jdbcType=INTEGER},
      path = #{path,jdbcType=VARCHAR},
      owner_id = #{ownerId,jdbcType=INTEGER},
      img_url = #{imgUrl,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      keyword = #{keyword,jdbcType=VARCHAR},
      view_count = #{viewCount,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>


  <select id="getArticleListOfDisplayByPath" resultType="com.jim.novel.entity.ArticleVo">
    select *
    from article
    where
    path like #{path}"%" and status = '1'
    order by
    create_time desc limit #{offset},#{rows}
  </select>

  <select id="getArticleListByOwnerId" resultType="com.jim.novel.entity.ArticleVo">
    select * from
    article
    where folder_id in (select folder_id from user_folder where user_id = #{ownerId})
    order by create_time
    desc
  </select>

  <select id="getArticleListByOwnerIdAndPath" resultType="com.jim.novel.entity.ArticleVo">
    select * from
    article
    where path like #{path}"%" and folder_id in (select folder_id from user_folder where user_id = #{ownerId}) <if test="status !=null">and `status` = #{status}</if>
    order by create_time
    desc
  </select>

  <select id="getArticleCountOfDisplayByPath" resultType="Integer">
    select
    count(*)
    from article
    where
    path like #{path}"%" and status = '1'
  </select>

  <select id="getPopularList" resultType="com.jim.novel.entity.ArticleVo">
    select *
    from article
    order by view_count desc limit #{offset},#{rows}
  </select>

  <select id="getAllArticle" resultType="com.jim.novel.entity.ArticleVo">
    select *
    from article
    order by create_time
  </select>

  <update id="updateStatus" parameterType="Integer">
    UPDATE article set   status = #{status,jdbcType=INTEGER} where article_id = #{articleId}
  </update>

  <insert id="addArticle" parameterType="com.jim.novel.model.Article">
    insert into
    article(folder_id,path,owner_id,title,status,keyword,img_url,small_img_url,view_count,create_time,modify_time)
    values(#{folderId},#{path},#{ownerId},#{title},#{status},#{keyword},#{imgUrl},#{smallImgUrl},#{viewCount},#{createTime},#{modifyTime})
    <selectKey resultType="long" keyProperty="article_ids">
      SELECT
      LAST_INSERT_ID()
    </selectKey>
  </insert>

</mapper>